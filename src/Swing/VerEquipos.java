/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Swing;

import Clases.Categoria;
import Clases.Dispositivo;
import Clases.Lugar;
import Clases.Usuario;
import java.util.Iterator;
import java.util.List;
import Controladores.Fabrica;
import Controladores.IControlador;
import static Swing.Console.EscritorioMenu;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author Nelson
 */
public class VerEquipos extends javax.swing.JInternalFrame {
    private IControlador IC;
    private int fila = 0;
    private DefaultTableModel modelo;

    /**
     * Creates new form NewJInternalFrame
     */
    public VerEquipos() {
        initComponents();
        this.jLabelError.setVisible(false);
        modelo = (DefaultTableModel)this.jTableEquipos.getModel();
        Fabrica fabrica = Fabrica.getInstance();
        IC = fabrica.getICtrl();
        TableRowSorter<TableModel> elQueOrdena = new TableRowSorter<TableModel>(modelo);
        jTableEquipos.setRowSorter(elQueOrdena);
        cargarTabla();
        cargarCboxCampo();
        
        
        //modelo.fireTableDataChanged();
        
        //this.jTableEquipos.setModel(modelo);
        //this.jTableEquipos.repaint();

        //modelo.setRowFilter(RowFilter.regexFilter("2", 1));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEquipos = new javax.swing.JTable();
        jBVer = new javax.swing.JButton();
        jBEditar = new javax.swing.JButton();
        jBEliminar = new javax.swing.JButton();
        jLabelError = new javax.swing.JLabel();
        jBFiltrar = new javax.swing.JButton();
        jCBCampo = new javax.swing.JComboBox();
        jTextBuscar = new javax.swing.JTextField();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Ver Equipos");
        setPreferredSize(new java.awt.Dimension(1100, 398));

        jTableEquipos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Categoría", "Marca", "Modelo", "Procesador", "Memoria", "HDD", "IP", "Estado", "Lugar", "Usuario", "Fecha de Compra", "Proveedor", "Garantia", "Factura"
            }
        ));
        jTableEquipos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEquiposMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableEquipos);

        jBVer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar .png"))); // NOI18N
        jBVer.setText("Ver");
        jBVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBVerActionPerformed(evt);
            }
        });

        jBEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/editar.png"))); // NOI18N
        jBEditar.setText("Editar");
        jBEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEditarActionPerformed(evt);
            }
        });

        jBEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cancelar.png"))); // NOI18N
        jBEliminar.setText("Eliminar");
        jBEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEliminarActionPerformed(evt);
            }
        });

        jLabelError.setForeground(new java.awt.Color(255, 0, 0));
        jLabelError.setText("Debe seleccionar una fila de la tabla!");

        jBFiltrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/filtro.png"))); // NOI18N
        jBFiltrar.setText("Filtrar");
        jBFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFiltrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1066, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabelError)
                        .addGap(73, 73, 73)
                        .addComponent(jCBCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextBuscar)
                        .addGap(18, 18, 18)
                        .addComponent(jBFiltrar)
                        .addGap(57, 57, 57)
                        .addComponent(jBEliminar)
                        .addGap(18, 18, 18)
                        .addComponent(jBEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBVer, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBEditar)
                        .addComponent(jBEliminar)
                        .addComponent(jBVer)
                        .addComponent(jBFiltrar)
                        .addComponent(jTextBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCBCampo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelError))
                .addGap(0, 18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTableEquiposMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEquiposMouseClicked
        // TODO add your handling code here:
        this.jLabelError.setVisible(false);
        String s = modelo.getValueAt(this.jTableEquipos.getSelectedRow(), this.jTableEquipos.getSelectedColumn()).toString();
        int i = this.jTableEquipos.getSelectedColumn();
        this.jCBCampo.setSelectedItem(i+" - "+this.jTableEquipos.getColumnName(i));
        this.jTextBuscar.setText(s);
    }//GEN-LAST:event_jTableEquiposMouseClicked

    private void jBVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVerActionPerformed
        // TODO add your handling code here:
        int fila = this.jTableEquipos.getSelectedRow();
        int id = Integer.parseInt(this.jTableEquipos.getValueAt(fila, 0).toString());
        VerEditarEquipo ve = new VerEditarEquipo(id,false);
        EscritorioMenu.add(ve);
        ve.show();
        
    }//GEN-LAST:event_jBVerActionPerformed

    private void jBEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEditarActionPerformed
        // TODO add your handling code here:
        int fila = this.jTableEquipos.getSelectedRow();
        int id = Integer.parseInt(this.jTableEquipos.getValueAt(fila, 0).toString());
        VerEditarEquipo ve = new VerEditarEquipo(id,true);
        EscritorioMenu.add(ve);
        ve.show();
        dispose();
        
    }//GEN-LAST:event_jBEditarActionPerformed

    private void jBEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEliminarActionPerformed
        // TODO add your handling code here:
        
        if(this.jTableEquipos.getSelectedRow()==-1){
            this.jLabelError.setVisible(true);
        }
        else{
            if(!this.jTableEquipos.getValueAt(this.jTableEquipos.getSelectedRow(),8).toString().equals("DESUSO")){
                JOptionPane.showMessageDialog(null, "El equipo no esta en DESUSO","ERROR",JOptionPane.ERROR_MESSAGE);
            }
            else{
                int resp = JOptionPane.showConfirmDialog(null, "Estás Seguro???",null,JOptionPane.OK_CANCEL_OPTION);
                if(resp==0){
                    int id = Integer.parseInt(this.jTableEquipos.getValueAt(this.jTableEquipos.getSelectedRow(),0).toString());
                    IC.eliminarEquipo(id);
                    limpiarTabla();
                    cargarTabla();
                }
            }
        }

    }//GEN-LAST:event_jBEliminarActionPerformed

    private void jBFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBFiltrarActionPerformed
        
        StringTokenizer tokens = new StringTokenizer(this.jCBCampo.getSelectedItem().toString());
        int col = Integer.parseInt(tokens.nextToken());       
        filtrar(col,this.jTextBuscar.getText());
    }//GEN-LAST:event_jBFiltrarActionPerformed
    
    private void filtrar(int col, String busqueda){
        limpiarTabla();
        int fila = 0;
        ArrayList equipos = IC.ListarEquipos();
        Iterator it = equipos.iterator();
        String lista[]=new String[15];
        //Iterator inds = lstProdInd.iterator();
        while(it.hasNext()){
            Dispositivo disp = (Dispositivo)it.next();
            Categoria cat = disp.getTipo();
            Lugar lug = disp.getLugar();
            Usuario usu = disp.getUsuario();
            lista[0]= Integer.toString(disp.getIdDisp());
            lista[1]= cat.getNombrePadre()+"-->"+cat.getNombre();
            lista[2]= disp.getMarca();
            lista[3]= disp.getModelo();
            if(cat.getNombrePadre().equals("Computadora")){
                lista[4]= disp.getProcesador();
                lista[5]= disp.getMemoria();
                lista[6]= disp.getHDD();
                lista[7]= disp.getIp();
            }
            else{
                lista[4]= "";
                lista[5]= "";
                lista[6]= "";
                lista[7]= "";
            }
            lista[8]= disp.getEstado();
            lista[9]= lug.getLocal()+"-->"+lug.getSeccion();            
            lista[10]= usu.getNombre()+" "+usu.getApellido();
            lista[11]= disp.getFecha_compra().toString();
            lista[12]= disp.getProveedor();
            lista[13]= Integer.toString(disp.getGarantia());
            lista[14]= Integer.toString(disp.getFactura());
            if(lista[col].contains(busqueda)){         
                modelo.insertRow((int)fila, lista);
                fila++;
            }
        }
    
    
    }
    
    private void cargarTabla(){
        int fila = 0;
        ArrayList equipos = IC.ListarEquipos();
        Iterator it = equipos.iterator();
        String lista[]=new String[15];
        //Iterator inds = lstProdInd.iterator();
        while(it.hasNext()){
            Dispositivo disp = (Dispositivo)it.next();
            Categoria cat = disp.getTipo();
            Lugar lug = disp.getLugar();
            Usuario usu = disp.getUsuario();
            lista[0]= Integer.toString(disp.getIdDisp());
            lista[1]= cat.getNombrePadre()+"-->"+cat.getNombre();
            lista[2]= disp.getMarca();
            lista[3]= disp.getModelo();
            if(cat.getNombrePadre().equals("Computadora")){
                lista[4]= disp.getProcesador();
                lista[5]= disp.getMemoria();
                lista[6]= disp.getHDD();
                lista[7]= disp.getIp();
            }
            else{
                lista[4]= "";
                lista[5]= "";
                lista[6]= "";
                lista[7]= "";
            }
            lista[8]= disp.getEstado();
            lista[9]= lug.getLocal()+"-->"+lug.getSeccion();            
            lista[10]= usu.getNombre()+" "+usu.getApellido();
            lista[11]= disp.getFecha_compra().toString();
            lista[12]= disp.getProveedor();
            lista[13]= Integer.toString(disp.getGarantia());
            lista[14]= Integer.toString(disp.getFactura());

            
            modelo.insertRow((int)fila, lista);
            fila++;
        }
        
    } 
    public void limpiarTabla(){
        try {

            int filas=this.jTableEquipos.getRowCount();
            for (int i = 0;filas>i; i++) {
                modelo.removeRow(0);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al limpiar la tabla.");
        }
    }
    
    public void cargarCboxCampo(){   
        int i=0;
        while(i<this.jTableEquipos.getColumnCount()){
            String campo = this.jTableEquipos.getColumnName(i).toString();            
            this.jCBCampo.addItem(Integer.toString(i)+" - "+campo);
            i++;
        }        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBEditar;
    private javax.swing.JButton jBEliminar;
    private javax.swing.JButton jBFiltrar;
    private javax.swing.JButton jBVer;
    private javax.swing.JComboBox jCBCampo;
    private javax.swing.JLabel jLabelError;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableEquipos;
    private javax.swing.JTextField jTextBuscar;
    // End of variables declaration//GEN-END:variables
}
